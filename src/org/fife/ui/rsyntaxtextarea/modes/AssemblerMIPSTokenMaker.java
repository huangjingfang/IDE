/* The following code was generated by JFlex 1.4.1 on 2/1/08 1:33 PM */

/*
 * 12/06/2004
 *
 * AssemblerMIPSTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing MIPS assembler.
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;

/**
 * This class takes plain text and returns tokens representing MIPS assembler.
 * <p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance. Memory allocation needs to be almost completely
 * removed to be competitive with the handwritten lexers (subclasses of
 * <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around). We can
 * achieve this because RText always scans exactly 1 line of tokens at a time,
 * and hands the scanner this line as an array of characters (a Segment really).
 * Since tokens contain pointers to char arrays instead of Strings holding their
 * contents, there is no need for allocating new memory for Strings.
 * <p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.
 * <p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 * <li>The generated <code>AssemblerMIPSTokenMaker.java</code> file will contain
 * two definitions of both <code>zzRefill</code> and <code>yyreset</code>. You
 * should hand-delete the second of each definition (the ones generated by the
 * lexer), as these generated methods modify the input buffer, which we'll never
 * have to do.</li>
 * <li>You should also change the declaration/definition of zzBuffer to NOT be
 * initialized. This is a needless memory allocation for us since we will be
 * pointing the array somewhere else anyway.</li>
 * <li>You should NOT call <code>yylex()</code> on the generated scanner
 * directly; rather, you should use <code>getTokenList</code> as you would with
 * any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */

public class AssemblerMIPSTokenMaker extends AbstractJFlexTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = { 0, 1 };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =   "\11\0\1\10\1\7\1\65\1\66\1\65\22\0\1\10\1\14\1\4"+
    	    "\1\0\1\64\1\13\1\14\1\5\2\0\1\12\1\12\1\3\1\12"+
    	    "\1\15\1\12\1\26\1\16\1\21\1\24\1\25\1\25\1\20\1\23"+
    	    "\1\17\1\2\1\11\1\6\1\14\1\14\1\14\1\52\1\0\1\27"+
    	    "\1\32\1\41\1\43\1\34\1\51\1\53\1\31\1\47\1\1\1\36"+
    	    "\1\30\1\57\1\44\1\42\1\22\1\60\1\33\1\40\1\45\1\50"+
    	    "\1\63\1\54\1\56\1\62\1\55\1\3\1\0\1\3\1\14\1\61"+
    	    "\1\0\1\27\1\32\1\41\1\43\1\34\1\51\1\53\1\31\1\47"+
    	    "\1\1\1\36\1\30\1\57\1\44\1\42\1\22\1\60\1\33\1\40"+
    	    "\1\45\1\50\1\63\1\54\1\56\1\62\1\55\1\0\1\14\1\0"+
    	    "\1\14\6\0\1\65\252\0\2\46\115\0\1\37\u1ea8\0\1\65\1\65"+
    	    "\u0100\0\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    	    "\1\10\1\11\33\1\1\12\1\1\1\13\1\1\1\2"+
    	    "\1\14\1\15\25\0\15\1\1\2\27\1\2\0\2\2"+
    	    "\6\0\2\1\1\2\12\1\1\2\3\1\1\12\14\1"+
    	    "\4\0\1\13\1\0\5\1\1\13\22\1\3\16\7\0"+
    	    "\1\2\31\0\1\13\11\0\5\1\1\2\1\13\12\1"+
    	    "\2\2\4\1\1\13\1\2\21\1\1\13\5\1\1\0"+
    	    "\2\2\2\0\1\13\4\0\1\2\1\0\1\1\2\2"+
    	    "\2\1\1\13\6\1\1\2\15\1\1\2\10\1\1\13"+
    	    "\10\0\1\13\32\1\2\0\1\13\10\0\1\13\17\0"+
    	    "\6\1\1\2\7\1\1\17\1\13\1\1\1\2\1\1"+
    	    "\1\12\1\1\4\13\5\1\1\0\1\2\5\0\1\13"+
    	    "\2\0\4\1\1\13\1\1\1\13\4\1\1\13\14\1"+
    	    "\1\13\7\0\24\1\2\0\1\13\1\0\1\13\3\0"+
    	    "\1\13\5\0\7\1\2\13\2\17\6\1\1\17\2\0"+
    	    "\1\13\2\0\1\1\1\13\13\1\3\0\1\13\1\1"+
    	    "\2\13\2\1\5\0\1\13\2\1\1\17\1\13\1\1"+
    	    "\2\13\1\0\2\1\1\0\3\1\3\0\1\13\1\0"+
    	    "\10\1\2\13\2\1\3\0\2\1\1\0\1\1\2\0"+
    	    "\1\1\1\0\2\1\1\13\2\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[668];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =  "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    	    "\0\156\0\u01b8\0\156\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    	    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    	    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    	    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    	    "\0\u07f3\0\u082a\0\u03a7\0\156\0\156\0\u0861\0\u0898\0\u08cf"+
    	    "\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    	    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    	    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    	    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    	    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    	    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    	    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    	    "\0\u150e\0\u1545\0\156\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658"+
    	    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810"+
    	    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8"+
    	    "\0\u19ff\0\u1a36\0\u03a7\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    	    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    	    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    	    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071"+
    	    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    	    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\156\0\u2373\0\u23aa"+
    	    "\0\u23e1\0\u2418\0\u23aa\0\u244f\0\u2373\0\u2486\0\u24bd\0\u24f4"+
    	    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    	    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    	    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c"+
    	    "\0\u2a53\0\156\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    	    "\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55"+
    	    "\0\u2d8c\0\u03a7\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6"+
    	    "\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u108b\0\u3020\0\u3057"+
    	    "\0\u308e\0\u30c5\0\u30fc\0\u07f3\0\u3133\0\u316a\0\u31a1\0\u31d8"+
    	    "\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390"+
    	    "\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u1734\0\u3511"+
    	    "\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9"+
    	    "\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881"+
    	    "\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39"+
    	    "\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1"+
    	    "\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9"+
    	    "\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61"+
    	    "\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2\0\u4119"+
    	    "\0\u4150\0\u4187\0\u1545\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a"+
    	    "\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452"+
    	    "\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a"+
    	    "\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b\0\u47c2"+
    	    "\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a"+
    	    "\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb\0\u4b32"+
    	    "\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c\0\u4cb3\0\u4cea"+
    	    "\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34\0\u4e6b\0\u4ea2"+
    	    "\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e\0\u4fb5\0\u4fec\0\u5023\0\u03a7"+
    	    "\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u07f3\0\u5136\0\u516d\0\u51a4"+
    	    "\0\u1eb9\0\u1ef0\0\u51db\0\u5212\0\u5249\0\u5280\0\u52b7\0\u52ee"+
    	    "\0\u5325\0\u535c\0\u5393\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6"+
    	    "\0\u54dd\0\u5514\0\u554b\0\u5582\0\u55b9\0\u55f0\0\u5627\0\u565e"+
    	    "\0\u5695\0\u56cc\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816"+
    	    "\0\u584d\0\u5884\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce"+
    	    "\0\u5a05\0\u5a3c\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18\0\u5b4f\0\u5b86"+
    	    "\0\u5bbd\0\u5bf4\0\u5c2b\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e"+
    	    "\0\u5d75\0\u5dac\0\u5de3\0\u5e1a\0\u5e51\0\u5e88\0\u5ebf\0\u5ef6"+
    	    "\0\u5f2d\0\u5f64\0\u5f9b\0\u5fd2\0\u6009\0\u6040\0\u6077\0\u60ae"+
    	    "\0\u60e5\0\u611c\0\u6153\0\u618a\0\u61c1\0\u5438\0\u61f8\0\u622f"+
    	    "\0\u6266\0\u629d\0\u62d4\0\u630b\0\u6342\0\u6379\0\u63b0\0\u63e7"+
    	    "\0\u41be\0\u641e\0\u6455\0\u648c\0\u64c3\0\u64fa\0\u6531\0\u6568"+
    	    "\0\u659f\0\u65d6\0\u660d\0\u6644\0\156\0\u667b\0\u66b2\0\u4a56"+
    	    "\0\u66e9\0\u6720\0\u6757\0\u21bb\0\u678e\0\u67c5\0\u67fc\0\u6833"+
    	    "\0\u686a\0\u68a1\0\u68d8\0\u690f\0\u6946\0\u697d\0\u69b4\0\u4006"+
    	    "\0\u69eb\0\u6a22\0\u6a59\0\u6a90\0\u6ac7\0\u6afe\0\u6b35\0\u6b6c"+
    	    "\0\u6ba3\0\u6bda\0\u6c11\0\u6c48\0\u6c7f\0\u6cb6\0\u6ced\0\u6d24"+
    	    "\0\u07f3\0\u6d5b\0\u6d92\0\u6dc9\0\u6e00\0\u6e37\0\u6e6e\0\u6ea5"+
    	    "\0\u6edc\0\u6f13\0\u6f4a\0\u6f81\0\u6fb8\0\u47f9\0\u6fef\0\u7026"+
    	    "\0\u705d\0\u7094\0\u70cb\0\u7102\0\u7139\0\u7170\0\u71a7\0\u71de"+
    	    "\0\u7215\0\u724c\0\u7283\0\u72ba\0\u72f1\0\u7328\0\u735f\0\u7396"+
    	    "\0\u73cd\0\u7404\0\u743b\0\u7472\0\u74a9\0\u74e0\0\u7517\0\u754e"+
    	    "\0\u6455\0\u648c\0\u7585\0\u75bc\0\u75f3";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[668];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    	    "\1\12\1\3\3\13\1\14\4\5\1\15\4\5\1\16"+
    	    "\1\17\1\20\1\21\1\22\1\23\1\3\1\24\1\25"+
    	    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    	    "\1\36\1\37\1\3\1\40\1\41\1\42\1\43\1\44"+
    	    "\1\24\1\45\2\24\1\46\1\0\1\12\1\3\1\4"+
    	    "\1\5\1\3\1\6\1\7\1\10\1\11\1\12\1\3"+
    	    "\1\13\1\47\1\13\1\14\4\5\1\15\4\5\1\16"+
    	    "\1\17\1\20\1\21\1\22\1\23\1\3\1\24\1\25"+
    	    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    	    "\1\36\1\37\1\3\1\40\1\41\1\42\1\43\1\44"+
    	    "\1\24\1\45\2\24\1\46\1\0\1\12\67\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\11\24\1\52\3\24\1\53\1\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\1\24\1\5\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\4\5\1\24\4\5\6\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\4\6"+
    	    "\1\54\62\6\5\7\1\55\61\7\7\10\1\0\55\10"+
    	    "\12\0\1\12\55\0\1\12\16\0\1\56\1\57\1\60"+
    	    "\1\61\2\0\1\61\1\60\1\0\1\62\1\63\1\0"+
    	    "\1\64\1\65\1\66\2\67\2\70\1\71\1\0\1\72"+
    	    "\1\73\1\74\2\75\1\76\1\77\2\0\1\100\1\0"+
    	    "\1\101\1\102\7\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\11\24\1\103\3\24\1\104"+
    	    "\1\24\1\50\1\24\1\50\2\24\1\105\2\24\1\106"+
    	    "\1\50\1\24\1\107\1\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\1\110\5\24\1\111\3\24\1\112\4\24\1\50"+
    	    "\1\24\1\113\1\114\2\24\1\115\1\116\1\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\11\24\1\117"+
    	    "\1\24\2\120\1\121\1\122\1\50\1\24\1\50\2\24"+
    	    "\1\123\3\24\1\50\1\24\1\124\1\24\1\50\1\24"+
    	    "\1\53\7\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\11\24\1\125\5\24"+
    	    "\1\50\1\24\1\50\6\24\1\126\1\127\2\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\12\24\1\130\2\24\1\131"+
    	    "\1\132\1\50\1\24\1\50\4\24\1\133\1\24\1\134"+
    	    "\1\135\2\24\1\50\1\136\6\24\1\137\1\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\16\24\1\140\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\12\24"+
    	    "\1\141\2\24\1\142\1\24\1\50\1\24\1\50\1\24"+
    	    "\1\143\2\24\1\144\1\24\1\50\3\24\1\50\3\24"+
    	    "\1\145\1\24\1\146\2\24\1\147\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\23\0\1\150\5\0\1\151\1\152\1\153"+
    	    "\1\154\1\155\10\0\1\156\2\157\1\160\3\0\1\153"+
    	    "\5\0\1\161\4\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\4\24\1\162\5\24\1\163"+
    	    "\1\164\1\53\1\165\1\166\1\50\1\24\1\50\5\24"+
    	    "\1\167\1\170\1\171\1\172\1\24\1\50\1\24\1\53"+
    	    "\5\24\1\173\1\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\11\24\1\174"+
    	    "\5\24\1\50\1\24\1\50\2\24\1\175\3\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\1\110\3\24"+
    	    "\1\176\1\24\1\111\6\24\1\177\1\24\1\50\1\24"+
    	    "\1\50\6\24\1\50\2\24\1\200\1\50\10\24\1\201"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\11\24\1\202\2\24\1\203\2\24"+
    	    "\1\50\1\24\1\50\2\24\1\204\1\203\1\24\1\203"+
    	    "\1\205\1\206\1\207\1\203\1\50\1\24\1\203\3\24"+
    	    "\1\203\3\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\11\24\1\210\4\24"+
    	    "\1\211\1\50\1\24\1\50\2\24\1\212\3\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\13\24\1\213"+
    	    "\2\24\1\214\1\50\1\24\1\50\6\24\1\215\1\216"+
    	    "\2\24\1\50\7\24\1\217\1\24\2\50\34\0\1\220"+
    	    "\1\221\2\0\2\222\3\0\1\223\4\0\1\224\5\0"+
    	    "\1\225\7\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\15\24\1\226\1\227\1\50\1\24"+
    	    "\1\230\1\231\3\24\1\232\1\24\1\50\2\24\1\233"+
    	    "\1\50\4\24\1\234\4\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\235\1\236\3\24\1\237\1\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\11\24\1\106"+
    	    "\1\240\4\24\1\50\1\24\1\50\2\24\1\241\3\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\12\24"+
    	    "\1\242\2\24\1\243\1\24\1\50\1\24\1\50\2\24"+
    	    "\1\244\3\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\13\24\1\245\1\24\1\246\1\24\1\50\1\24"+
    	    "\1\50\2\24\1\247\3\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\16\24\1\250\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\2\24\1\251\3\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\11\24\1\252"+
    	    "\5\24\1\50\1\24\1\50\5\24\1\253\1\50\1\24"+
    	    "\1\254\1\253\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\6\24"+
    	    "\1\255\2\24\2\50\3\0\1\256\13\0\1\257\2\256"+
    	    "\1\257\1\0\1\256\1\260\2\256\1\261\3\0\1\262"+
    	    "\1\0\2\263\2\264\4\0\1\265\3\0\1\266\1\0"+
    	    "\1\266\1\0\1\267\5\0\1\263\4\0\2\47\13\0"+
    	    "\17\47\1\0\1\47\1\0\6\47\1\0\3\47\1\0"+
    	    "\11\47\3\0\3\50\1\0\3\50\2\0\1\50\2\0"+
    	    "\1\50\1\0\50\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\12\24\1\270\4\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\20\0\1\271\75\0\1\272\57\0\1\273\66\0"+
    	    "\1\274\77\0\1\275\65\0\1\276\16\0\2\277\1\0"+
    	    "\1\300\50\0\1\301\3\0\2\302\55\0\1\303\4\0"+
    	    "\1\304\62\0\1\305\2\0\1\306\10\0\1\307\11\0"+
    	    "\1\310\34\0\1\311\71\0\1\276\4\0\1\312\10\0"+
    	    "\1\313\3\0\1\300\50\0\1\314\6\0\1\315\53\0"+
    	    "\1\316\12\0\1\317\66\0\1\320\60\0\1\321\14\0"+
    	    "\1\300\66\0\1\322\61\0\1\323\51\0\1\324\70\0"+
    	    "\1\325\64\0\1\276\1\326\10\0\1\327\15\0\1\330"+
    	    "\46\0\2\331\1\0\1\332\14\0\1\333\7\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\15\24\1\334\1\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\1\335\10\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\2\24\1\336\3\24\1\337\1\340"+
    	    "\2\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\4\24\1\341"+
    	    "\12\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\15\24\1\342\1\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\14\24\1\343\1\344\1\24\1\50\1\24"+
    	    "\1\345\1\346\5\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\2\24\1\342\14\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\3\24\1\342\13\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\347\1\350\2\24\1\50\11\24"+
    	    "\2\50\1\0\3\50\1\0\3\50\2\0\1\50\2\0"+
    	    "\1\50\1\0\21\50\2\351\1\352\24\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\351\1\353\1\354\4\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\15\24\1\53"+
    	    "\1\24\1\50\1\24\1\50\3\24\1\355\2\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\3\24\1\356\2\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\14\24\1\357\2\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\1\24\1\53\1\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\2\24\1\360\3\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\4\24\1\361\1\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\1\24\1\362\4\24\1\50\3\24\1\50\1\24\1\363"+
    	    "\7\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\6\24\1\364\1\53\2\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\12\24\1\365\4\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\35\50\1\366"+
    	    "\12\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\1\367\10\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\16\24\1\370\1\50\1\24\1\50\5\24\1\370\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\16\24\1\371"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\5\24\1\53\3\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\16\24\1\53\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\27\50\1\372\20\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\5\24\1\373"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\374\1\50\1\24\1\50\5\24\1\370\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\5\24\1\375\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\4\24\1\376\12\24\1\50\1\24\1\377"+
    	    "\1\u0100\1\u0101\4\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\u0102\1\u0103\5\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u0104\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\13\24\1\u0105\3\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\3\24\1\u0106"+
    	    "\2\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\4\24\1\u0107\12\24\1\50\1\24\1\50\5\24\1\u0108"+
    	    "\1\u0109\1\u010a\2\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\6\24\1\50\1\24\1\203"+
    	    "\1\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\16\24\1\u010b"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\30\0\1\u010c\67\0\1\u010d\14\0\1\u010e\63\0"+
    	    "\1\u010f\53\0\2\u010d\77\0\1\u0110\11\0\1\u0111\42\0"+
    	    "\1\u0112\3\0\1\u0113\106\0\1\u0114\1\0\1\u0115\43\0"+
    	    "\1\u0116\73\0\2\u0117\26\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\11\24\1\u0118\5\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\12\24\1\u0119\4\24\1\50\1\24"+
    	    "\1\50\5\24\1\u011a\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\2\24\1\u011b"+
    	    "\3\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\11\24\2\u0119\4\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\1\24\1\u011c\4\24\1\50\3\24\1\50"+
    	    "\1\u011d\10\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\11\24\1\u011e\3\24"+
    	    "\1\u011f\1\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\35\50\1\u0120\1\50\1\u0121"+
    	    "\10\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\1\u0122\1\24\1\u0123\6\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\14\24\1\u0124\2\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\u0125\1\u0126\5\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\15\24\1\u0127\1\24"+
    	    "\1\50\1\24\1\50\5\24\1\u0128\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\3\24\1\u0129\2\24\1\50\3\24\1\50\4\24\1\u012a"+
    	    "\4\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\11\24\1\u012b\5\24\1\50"+
    	    "\1\24\1\50\5\24\1\237\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\364\1\53\2\24\1\50\1\342\10\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\2\24"+
    	    "\1\u012c\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\16\24\1\u012d"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\5\24"+
    	    "\1\u012e\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\u012f\1\u0130\5\24\1\50\1\24"+
    	    "\1\u0131\1\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\45\50\1\u0132"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\10\24\1\120\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\4\24\1\203\12\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\4\24\1\335"+
    	    "\4\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\11\24\1\106\5\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\15\24\1\53\1\24\1\50\1\24\1\u0133"+
    	    "\1\u0134\5\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\372\1\373"+
    	    "\2\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\3\24\1\u0135"+
    	    "\5\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\27\50\1\u0136\11\50\1\u0137\6\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\5\24\1\u0138"+
    	    "\1\50\3\24\1\50\4\24\1\u0139\4\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\4\24\1\u013a\12\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\23\0\1\u013b\110\0"+
    	    "\1\311\67\0\1\u013c\60\0\2\u013d\1\u013e\21\0\1\u013f"+
    	    "\21\0\1\322\2\0\1\322\10\0\1\322\1\0\1\322"+
    	    "\6\0\1\u0140\1\u0141\1\0\2\u0142\41\0\1\u0143\44\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\4\24\1\u0144\12\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\4\24\1\u0145\1\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\27\50\1\u0146\20\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\5\24\1\u0147\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\u0148\1\u0149\1\u014a\4\24\1\50\3\24\1\50"+
    	    "\10\24\1\u014b\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\1\342\2\24\1\342"+
    	    "\10\24\1\342\1\24\1\342\1\50\1\24\1\50\3\24"+
    	    "\1\u014c\1\u014d\1\24\1\u014e\1\u014f\2\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\4\24\1\u0107\12\24\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\16\50\1\u0150\31\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\16\24\1\u0151\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\6\24\1\u0152"+
    	    "\1\u0153\2\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\2\24\1\u0154\3\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\15\24\1\u0144\1\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\2\24"+
    	    "\1\u0155\3\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\2\24\1\u0156\3\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\5\24\1\u0105\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\6\24\1\u0136\1\u0138\2\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\5\24\1\342\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\15\24\1\u0157"+
    	    "\1\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\15\24\1\u0158\1\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\15\24\1\356\1\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\1\24\1\u0159\4\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\12\24\1\u015a"+
    	    "\1\124\3\24\1\50\1\24\1\50\1\24\1\u015b\4\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\12\24"+
    	    "\1\u015c\4\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\12\24\1\u015d\4\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\2\24\1\u015e\1\50"+
    	    "\11\24\2\50\3\0\1\256\13\0\4\256\1\0\4\256"+
    	    "\56\0\1\256\7\0\1\256\56\0\1\256\2\0\1\256"+
    	    "\2\0\1\256\1\0\1\256\16\0\1\256\50\0\1\256"+
    	    "\55\0\1\256\1\0\7\256\62\0\1\256\100\0\1\u015f"+
    	    "\32\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\15\24\1\53\1\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\21\0\1\322"+
    	    "\65\0\1\u0160\67\0\1\u0161\66\0\1\u0161\2\0\1\322"+
    	    "\65\0\1\u0162\74\0\1\u0163\75\0\2\u0164\67\0\1\u0165"+
    	    "\61\0\1\u0166\71\0\2\322\71\0\1\u0167\45\0\1\u0168"+
    	    "\103\0\2\u0169\61\0\1\u016a\76\0\1\u016b\71\0\2\u016c"+
    	    "\62\0\1\322\103\0\1\322\35\0\1\u016d\73\0\1\75"+
    	    "\75\0\1\u016e\1\u016f\67\0\1\u0170\60\0\2\u0171\45\0"+
    	    "\1\u0172\10\0\1\u0173\10\0\1\327\103\0\1\u016c\55\0"+
    	    "\1\u0174\54\0\1\u0175\101\0\2\u0176\65\0\2\u0177\52\0"+
    	    "\1\314\112\0\1\322\60\0\1\u0178\60\0\1\u0179\101\0"+
    	    "\1\322\10\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\u017a\1\u017b\2\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\16\24\1\342\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\1\24\1\342\3\24\1\u0105\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\45\50\1\u017c\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\10\24\1\u017d\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\1\24\1\u017e\4\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\12\24\1\u017f\4\24\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\1\335\10\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\13\50\1\u0180\34\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\13\24\1\341\3\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\35\50"+
    	    "\1\u0181\12\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\1\u0182\10\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\32\50\1\u0183\15\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\30\50\2\u0184\16\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\1\24"+
    	    "\1\210\1\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\6\24\1\u0184\1\u0185\2\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\15\24\1\342\1\24\1\50"+
    	    "\1\24\1\50\6\24\1\u0132\1\120\1\53\1\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\16\24\1\u0186\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\2\24"+
    	    "\1\200\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\1\u0187\10\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\11\24\1\u0186\5\24\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\1\24\1\u0101\7\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\2\24\1\u0188\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\13\50\1\u0189\34\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\13\24\1\363\3\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\2\24\1\53"+
    	    "\6\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\11\24\1\u018a\5\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\21\50\2\51\25\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\51\1\342\5\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\2\24\1\u018b\6\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\16\24\1\u0188\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\16\24\1\u018c"+
    	    "\1\50\1\24\1\50\5\24\1\342\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\14\50\1\u018d\10\50\1\u018d\1\50"+
    	    "\1\u018d\6\50\1\u018d\3\50\1\u018d\5\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\14\24\1\203\2\24\1\50\1\24\1\50\3\24\1\203"+
    	    "\1\24\1\203\1\50\3\24\1\50\1\24\1\203\3\24"+
    	    "\1\203\3\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\2\24\1\u018e\3\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\3\50\1\0\3\50\2\0\1\50\2\0"+
    	    "\1\50\1\0\16\50\1\u018f\31\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u0190\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\5\24\1\53\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\2\24\1\342\3\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\4\24"+
    	    "\1\342\12\24\1\50\1\24\1\u0191\1\u0192\5\24\1\u0193"+
    	    "\1\u0194\2\24\1\50\4\24\1\342\4\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\15\24\1\u010b\1\u0195\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\27\50\1\u0196"+
    	    "\20\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\5\24"+
    	    "\1\u0197\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\4\24\1\342\1\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\42\0\1\u0198\110\0\1\153"+
    	    "\51\0\2\u0199\1\153\51\0\1\u016c\100\0\1\u019a\100\0"+
    	    "\1\u019b\50\0\1\u019c\75\0\1\u019d\62\0\1\u019e\56\0"+
    	    "\1\u019f\71\0\2\u013d\4\0\1\u01a0\2\0\1\153\57\0"+
    	    "\1\u01a1\25\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\1\24"+
    	    "\1\375\4\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\10\24\1\53\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\u0132\1\120\1\53\1\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\15\24\1\246\1\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\5\24\1\237"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\4\24"+
    	    "\1\u01a2\4\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\1\24\1\u01a3\4\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\1\24\1\u01a4\1\24\1\50\11\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\26\50\1\u01a5\21\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\16\50\1\u01a6\31\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\4\24\1\u01a7\1\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u01a8\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\u0148"+
    	    "\1\u0149\4\24\1\u01a9\1\50\1\24\1\53\1\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\23\50\1\u01aa\24\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\1\24\1\u01ab\4\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\15\24\1\u01ac"+
    	    "\1\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\u0148"+
    	    "\1\u0149\5\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\16\24\1\u0130\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\4\24\1\u01ad"+
    	    "\4\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\5\24\1\u0149\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\u01ae\1\u01af\5\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\15\24\1\u01b0"+
    	    "\1\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\11\24\1\u0130\5\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\21\50\2\u01b1\25\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\u01b1\1\u01b2\5\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\14\24\1\u01b3\2\24\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\32\50\1\364\15\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\4\50\1\u01b4\43\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\4\24\1\u01b5\12\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\5\24\1\u01b6\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\12\50\1\u01b7\35\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\16\50"+
    	    "\1\u01b8\31\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\12\24\1\335\4\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\16\24\1\u01b9\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u01ba\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\42\0\1\322\60\0\1\u01bb\100\0\1\u01bc"+
    	    "\51\0\1\u01bd\1\0\1\u01be\76\0\1\u01bf\60\0\1\75"+
    	    "\11\0\2\u01c0\51\0\1\322\10\0\1\314\66\0\1\u01c1"+
    	    "\23\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\1\24\1\342"+
    	    "\4\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\3\24\1\342\2\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\15\50\1\u01c2\32\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\15\24\1\u01c3\1\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\27\50"+
    	    "\1\u01c4\20\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\5\24\1\106\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\12\24\1\u01c5\1\24\1\u01c6\2\24\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\2\24\1\u01c7\3\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u0194\1\50\1\24\1\50\6\24\1\u01c8\1\u01c9\2\24"+
    	    "\1\50\11\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\14\24\1\342\2\24"+
    	    "\1\50\1\24\1\50\3\24\1\u01ca\2\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\25\50\1\u01cb\22\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\3\24\1\u01cc\2\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\1\u01cd\5\50"+
    	    "\1\u01ce\12\50\2\51\25\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\1\110\5\24"+
    	    "\1\111\10\24\1\50\1\24\1\51\1\342\5\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\24\50\1\u01cf\23\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\2\24\1\u010b"+
    	    "\3\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\11\24\1\u01d0\5\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\14\24\1\362"+
    	    "\2\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\1\24\1\u01d1\1\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\3\24\1\u0188"+
    	    "\2\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\2\24\1\u01a7\3\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\15\24\1\u0105"+
    	    "\1\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\2\24\1\53\3\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\10\24\1\53\6\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\5\24\1\120\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\6\24\1\u01d2\1\u01d3\2\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\6\24\1\u01d4"+
    	    "\1\u01d5\2\24\1\50\11\24\2\50\34\0\1\u01d6\53\0"+
    	    "\1\322\2\0\1\322\65\0\1\322\75\0\1\u01d7\65\0"+
    	    "\1\322\103\0\1\u01d8\63\0\1\221\53\0\1\u019c\105\0"+
    	    "\2\333\53\0\1\u01d9\66\0\1\u01da\50\0\1\322\2\0"+
    	    "\1\322\10\0\1\322\1\0\1\322\6\0\1\u0140\1\u01db"+
    	    "\1\0\2\u0142\65\0\2\75\4\0\1\322\57\0\1\322"+
    	    "\54\0\1\u01dc\5\0\1\u019c\61\0\1\322\71\0\2\u016c"+
    	    "\4\0\1\u01dd\50\0\1\u01de\76\0\2\u01df\51\0\1\322"+
    	    "\111\0\2\u01e0\65\0\2\u01e1\62\0\1\u01e2\53\0\1\u016e"+
    	    "\75\0\2\u016c\56\0\1\u01e3\72\0\1\u0163\32\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\27\50"+
    	    "\1\u01e4\20\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\5\24\1\u01ac\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\11\50\1\u01e5\36\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\11\24\1\u01e6\5\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\2\24"+
    	    "\1\u01e7\3\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\u01e8\1\u01e9"+
    	    "\2\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\23\50\1\u01ea\24\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\26\50\1\u01eb\21\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\4\24\1\u01ec\1\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\41\50\1\u01b7\6\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\30\50"+
    	    "\2\u01ed\16\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\6\24\1\u01ed\1\u01ee\2\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\12\24\1\342\4\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\5\24\1\u01ef\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\36\50\1\u01f0\11\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\364\1\53\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\11\24\1\u01f1\5\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\11\24\1\246\5\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\15\24\1\u0145\1\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\30\50\2\u01f2\16\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\6\24\1\u01f2"+
    	    "\1\u01f3\2\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\33\50\1\51"+
    	    "\14\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\2\24\1\342\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\15\24\1\u01f4\1\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\41\50\1\51\6\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\4\24\1\342\4\24\2\50\35\0\1\u01f5"+
    	    "\102\0\1\153\64\0\2\u01f6\53\0\1\u01f7\67\0\2\322"+
    	    "\71\0\1\u01f8\77\0\1\322\53\0\2\u013d\1\0\1\75"+
    	    "\71\0\1\u0163\2\u01f9\46\0\1\u01fa\37\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u01fb\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\51\1\342\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\1\24\1\u01fc\4\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\34\50\1\51\13\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\21\50\2\u0148\1\50\1\u0193\23\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\6\24\1\50\3\24\1\51"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\u0148"+
    	    "\1\u0149\1\24\1\u0194\3\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\5\24"+
    	    "\1\u0186\1\u01fd\1\u01fe\2\24\1\50\11\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\11\50\1\u01ff\36\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\11\24\1\u0200\5\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\7\24\1\u01a7\1\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\16\24\1\u01fb\1\50\1\24\1\50\2\24\1\u010b"+
    	    "\3\24\1\50\3\24\1\50\11\24\2\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\16\50"+
    	    "\1\u0201\31\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\16\24\1\246\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\2\24"+
    	    "\1\u0202\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\16\50\1\u0203\31\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\16\24\1\u0204\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\12\24"+
    	    "\1\375\4\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\12\50\1\u0205\35\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\12\24\1\u0206\4\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u0207\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\16\50\1\51\31\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\21\50"+
    	    "\2\u018d\25\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\u018d"+
    	    "\1\203\5\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\3\24\1\u01ca\2\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\51\0\1\u0208\51\0"+
    	    "\1\322\103\0\1\u0209\64\0\2\u020a\54\0\2\u016e\101\0"+
    	    "\1\u020b\61\0\1\u020b\22\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\32\50\1\u01e8\15\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\1\24"+
    	    "\1\u01e9\1\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\15\50\1\51"+
    	    "\32\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\1\24\1\u020c\1\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\u01cf\1\u010b"+
    	    "\2\24\1\50\11\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\u01b7"+
    	    "\1\335\1\50\6\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\33\50\1\u020d\14\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\6\24\1\50\2\24\1\u020e\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\16\24\1\u0194\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\26\50"+
    	    "\1\u020d\21\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\4\24\1\u020e\1\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\2\50\1\51\45\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\3\50\1\51\44\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\26\50\1\51\21\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\5\24\1\u0188\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\4\24\1\342\12\24\1\50\1\24"+
    	    "\1\50\6\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\26\50\1\u020f\21\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\4\24\1\u0210\1\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\3\50\1\0\3\50\2\0\1\50\2\0"+
    	    "\1\50\1\0\12\50\1\u020f\35\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\12\24"+
    	    "\1\u0210\4\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\43\0\1\256\53\0\1\322\66\0"+
    	    "\1\276\16\0\2\75\7\0\1\u0211\36\0\1\u016c\105\0"+
    	    "\2\75\51\0\1\322\10\0\1\314\11\0\1\322\56\0"+
    	    "\1\u0212\67\0\2\u0213\53\0\1\u0214\71\0\2\u0215\56\0"+
    	    "\1\u0216\65\0\1\316\101\0\1\u01d9\24\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\44\50\1\u01a5"+
    	    "\3\50\1\0\3\50\1\0\3\50\2\0\1\50\2\0"+
    	    "\1\50\1\0\27\50\1\u01b7\20\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\5\24\1\335\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\4\24\1\u0217\1\24\1\50\3\24\1\50\11\24\2\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\23\50\1\51\24\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\24\50\1\u0218\23\50"+
    	    "\1\0\3\50\1\0\3\50\2\0\1\50\2\0\1\50"+
    	    "\1\0\14\50\1\51\33\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\14\24\1\342"+
    	    "\2\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\37\50\1\u0219\10\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\2\24\1\u0188\6\24\2\50\1\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\13\24\1\u021a"+
    	    "\3\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\24\50\1\u021b\23\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\12\24\1\53\4\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\33\50\1\u021c\14\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\2\24\1\u021d\1\50\11\24\2\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\4\24\1\u01ba\1\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\43\0\1\u020a\70\0\1\u016c\67\0"+
    	    "\1\u0176\51\0\1\u021e\36\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\4\24\1\246\1\24\1\50\3\24\1\50\11\24"+
    	    "\2\50\1\0\3\50\1\0\3\50\2\0\1\50\2\0"+
    	    "\1\50\1\0\27\50\1\u0136\20\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\5\24\1\u0138\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\12\50\1\u021f\35\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\12\24\1\u01f1\4\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\1\0\3\50\1\0\3\50"+
    	    "\2\0\1\50\2\0\1\50\1\0\27\50\1\51\20\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\12\24\1\u0220\4\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\11\24\2\50\1\0\3\50"+
    	    "\1\0\3\50\2\0\1\50\2\0\1\50\1\0\35\50"+
    	    "\1\51\12\50\1\0\1\50\2\24\1\0\3\50\2\0"+
    	    "\1\51\2\0\1\50\1\0\17\24\1\50\1\24\1\50"+
    	    "\6\24\1\50\3\24\1\50\1\342\10\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\30\50\2\u0201\16\50\1\0\1\50\2\24\1\0\3\50"+
    	    "\2\0\1\51\2\0\1\50\1\0\17\24\1\50\1\24"+
    	    "\1\50\6\24\1\u0201\1\246\2\24\1\50\11\24\2\50"+
    	    "\1\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\5\24\1\146\3\24\2\50\44\0\1\u0221"+
    	    "\67\0\1\322\70\0\2\322\17\0\1\50\2\24\1\0"+
    	    "\3\50\2\0\1\51\2\0\1\50\1\0\17\24\1\50"+
    	    "\1\24\1\50\3\24\1\u0222\2\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\30\50\2\51\16\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\6\24\1\51\1\342\2\24"+
    	    "\1\50\11\24\2\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\16\50\1\u0223\31\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\16\24\1\u0224\1\50\1\24\1\50\6\24\1\50"+
    	    "\3\24\1\50\11\24\2\50\30\0\1\u0225\107\0\1\u0226"+
    	    "\62\0\1\u0227\75\0\1\322\60\0\1\u0228\62\0\1\u0229"+
    	    "\25\0\1\50\2\24\1\0\3\50\2\0\1\51\2\0"+
    	    "\1\50\1\0\17\24\1\50\1\24\1\50\5\24\1\u022a"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\26\50\1\u022b"+
    	    "\21\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\2\24"+
    	    "\1\u0194\3\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\15\50\1\u022c\32\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\1\51\2\50\1\51\10\50"+
    	    "\1\51\1\50\1\51\6\50\1\u022d\1\u022e\1\50\2\u022f"+
    	    "\16\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\1\342\2\24\1\342\10\24\1\342"+
    	    "\1\24\1\342\1\50\1\24\1\50\3\24\1\u01ca\1\u014d"+
    	    "\1\24\1\u022f\1\u0230\2\24\1\50\11\24\2\50\31\0"+
    	    "\1\153\36\0\3\50\1\0\3\50\2\0\1\50\2\0"+
    	    "\1\50\1\0\12\50\1\364\35\50\1\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\2\24\1\u0231\3\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\35\0\1\u0232\32\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\16\24"+
    	    "\1\u0233\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\11\24\2\50\1\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\43\50\1\u0234\4\50\1\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\17\24\1\50\1\24\1\50\6\24\1\50\3\24\1\50"+
    	    "\6\24\1\u0235\2\24\2\50\42\0\1\u0236\75\0\1\u016e"+
    	    "\64\0\2\75\7\0\1\u0237\65\0\1\u0238\10\0\1\50"+
    	    "\2\24\1\0\3\50\2\0\1\51\2\0\1\50\1\0"+
    	    "\16\24\1\u0239\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\11\24\2\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\27\50\1\u023a\20\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\25\50\1\51\22\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\16\50\1\u0193\31\50\1\0"+
    	    "\3\50\1\0\3\50\2\0\1\50\2\0\1\50\1\0"+
    	    "\14\50\1\51\10\50\1\u022d\22\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\25\50\1\u01cf"+
    	    "\22\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\3\24"+
    	    "\1\u010b\2\24\1\50\3\24\1\50\11\24\2\50\1\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\17\24\1\50\1\24\1\50\6\24\1\50\3\24"+
    	    "\1\50\1\24\1\u01a7\7\24\2\50\31\0\1\u023b\36\0"+
    	    "\1\50\2\24\1\0\3\50\2\0\1\51\2\0\1\50"+
    	    "\1\0\12\24\1\u023c\4\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\11\24\2\50\1\0\3\50\1\0"+
    	    "\3\50\2\0\1\50\2\0\1\50\1\0\43\50\1\51"+
    	    "\4\50\1\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\50\3\24\1\50\6\24\1\342\2\24\2\50\34\0"+
    	    "\1\u023d\62\0\1\u023e\114\0\1\322\11\0\1\50\2\24"+
    	    "\1\0\3\50\2\0\1\51\2\0\1\50\1\0\17\24"+
    	    "\1\50\1\24\1\50\6\24\1\50\3\24\1\50\3\24"+
    	    "\1\246\5\24\2\50\1\0\3\50\1\0\3\50\2\0"+
    	    "\1\50\2\0\1\50\1\0\16\50\1\u023f\31\50\47\0"+
    	    "\2\u0240\17\0\1\50\2\24\1\0\3\50\2\0\1\51"+
    	    "\2\0\1\50\1\0\17\24\1\50\1\24\1\50\6\24"+
    	    "\1\u0241\1\u0242\2\24\1\50\11\24\2\50\43\0\1\u0243"+
    	    "\65\0\1\u0244\25\0\3\50\1\0\3\50\2\0\1\50"+
    	    "\2\0\1\50\1\0\40\50\1\u0201\7\50\33\0\1\322"+
    	    "\63\0\1\276\72\0\1\u0245\75\0\1\322\24\0";
    private static int[] zzUnpackTrans() {
        int[] result = new int[31850];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
            "Error: pushback value was too large" };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\5\1\1\11\1\1\1\11\40\1\2\11"+
    	    "\25\0\45\1\2\0\1\1\1\11\6\0\36\1\4\0"+
    	    "\1\1\1\0\30\1\1\11\2\1\7\0\1\1\31\0"+
    	    "\1\11\11\0\60\1\1\0\2\1\2\0\1\1\4\0"+
    	    "\1\1\1\0\44\1\10\0\33\1\2\0\1\1\10\0"+
    	    "\1\1\17\0\36\1\1\0\1\1\5\0\1\1\2\0"+
    	    "\31\1\7\0\24\1\2\0\1\1\1\0\1\1\3\0"+
    	    "\1\1\5\0\21\1\1\11\2\0\1\1\2\0\15\1"+
    	    "\3\0\6\1\5\0\10\1\1\0\2\1\1\0\3\1"+
    	    "\3\0\1\1\1\0\14\1\3\0\2\1\1\0\1\1"+
    	    "\2\0\1\1\1\0\3\1\2\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[668];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /* user code: */

    /**
     * Constructor. We must have this here as JFLex does not generate a no
     * parameter constructor.
     */
    public AssemblerMIPSTokenMaker() {
        super();
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType
     *            The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType
     *            The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array
     *            The character array.
     * @param start
     *            The starting offset in the array.
     * @param end
     *            The ending offset in the array.
     * @param tokenType
     *            The token's type.
     * @param startOffset
     *            The offset in the document at which this token occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { ";", null };
    }

    /**
     * Returns the first token in the linked list of tokens generated from
     * <code>text</code>. This method must be implemented by subclasses so they
     * can correctly implement syntax highlighting.
     *
     * @param text
     *            The text from which to get tokens.
     * @param initialTokenType
     *            The token type we should start with.
     * @param startOffset
     *            The offset into the document at which <code>text</code>
     *            starts.
     * @return The first <code>Token</code> in a linked list representing the
     *         syntax highlighted text.
     */
    @Override
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
        default:
            state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise
     *         <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream <b>cannot</b> be
     * reused (internal buffer is discarded and lost). Lexical state is set to
     * <tt>YY_INITIAL</tt>.
     *
     * @param reader
     *            the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill no
         * longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array). So, we assign zzEndRead here.
         */
        // zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     *
     * @param in
     *            the java.io.Reader to read input from.
     */
    public AssemblerMIPSTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     *
     * @param in
     *            the java.io.Inputstream to read input from.
     */
    public AssemblerMIPSTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed
     *            the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0; /* index in packed string */
        int j = 0; /* index in unpacked array */
        while (i < 200) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; /* indicate end of file */
        zzEndRead = zzStartRead; /* invalidate buffer */

        if (zzReader != null)
            zzReader.close();
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState
     *            the new lexical state
     */
    @Override
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos
     *            the position of the character to fetch. A value from 0 to
     *            yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode
     *            the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number
     *            the number of characters to be read again. This number must
     *            not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException
     *                if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            if (zzMarkedPosL > zzStartRead) {
                switch (zzBufferL[zzMarkedPosL - 1]) {
                case '\n':
                case '\u000B':
                case '\u000C':
                case '\u0085':
                case '\u2028':
                case '\u2029':
                    zzAtBOL = true;
                    break;
                case '\r':
                    if (zzMarkedPosL < zzEndReadL)
                        zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                    else if (zzAtEOF)
                        zzAtBOL = false;
                    else {
                        boolean eof = zzRefill();
                        zzMarkedPosL = zzMarkedPos;
                        zzEndReadL = zzEndRead;
                        zzBufferL = zzBuffer;
                        if (eof)
                            zzAtBOL = false;
                        else
                            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                    }
                    break;
                default:
                    zzAtBOL = false;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            if (zzAtBOL)
                zzState = ZZ_LEXSTATE[zzLexicalState + 1];
            else
                zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1)
                        break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8)
                            break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 1: {
                addToken(Token.IDENTIFIER);
//              System.out.println("ID");
            }
            case 16:
                break;
            case 2: {
                addToken(Token.RESERVED_WORD);
//              System.out.println("REserved word");
            }
            case 17:
                break;
            case 3: {
                addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
//              System.out.println("十进制数");
            }
            case 18:
                break;
            case 4: {
                addToken(Token.ERROR_STRING_DOUBLE);
//              System.out.println("Error String double");
                addNullToken();
                return firstToken;
            }
            case 19:
                break;
            case 5: {
                addToken(Token.ERROR_CHAR);
//              System.out.println("Error Char");
                /*
                 * addNullToken(); return firstToken;
                 */
            }
            case 20:
                break;
            case 6: {
                addToken(Token.COMMENT_EOL);
//              System.out.println("Comment Token");
                addNullToken();
                return firstToken;
            }
            case 21:
                break;
            case 7: {
                addNullToken();
                return firstToken;
            }
            case 22:
                break;
            case 8: {
                addToken(Token.WHITESPACE);
//              System.out.println("WhiteSpace");
            }
            case 23:
                break;
            case 9: {
                addToken(Token.OPERATOR);
//              System.out.println("Operator");
            }
            case 24:
                break;
            case 10: {
                addToken(Token.FUNCTION);
//              System.out.println("function");
            }
            case 25:
                break;
            case 11: {
                addToken(Token.PREPROCESSOR);
//              System.out.println("Preprocessor");
            }
            case 26:
                break;
            case 12: {
                addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
//              System.out.println("LITERAL_STRING_DOUBLE_QUOTE");
            }
            case 27:
                break;
            case 13: {
                addToken(Token.LITERAL_CHAR);
//              System.out.println("Literal_char");
            }
            case 28:
                break;
            case 14: {
                addToken(Token.VARIABLE);
//              System.out.println("Variable");
            }
            case 29:
                break;
            case 15: {
                addToken(Token.DATA_TYPE);
//              System.out.println("Data Type");
            }
            case 30:
                break;
            default:
//              System.out.println("Default");
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    switch (zzLexicalState) {
                    case YYINITIAL: {
                        addNullToken();
                        return firstToken;
                    }
                    case 669:
                        break;
                    default:
                        return null;
                    }
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
